<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Basic package info -->
    <TargetFrameworks>netstandard2.1;netcoreapp3.1;net5.0;net6.0;net7.0</TargetFrameworks>
    <RootNamespace>SadRogue.Primitives</RootNamespace>
    <LangVersion>8.0</LangVersion>
    <Nullable>enable</Nullable>
    <Version>1.6.0-rc3</Version>
    <Version Condition="'$(Configuration)'=='Debug'">$(Version)-debug</Version>
    <Authors>Chris3606;Thraka</Authors>
    <Company>TheSadRogue</Company>
    <Copyright>Copyright Â© 2023 [Christopher Ridley (Chris3606) and TheSadRogue Steve De George JR (Thraka)]</Copyright>
    <Description>A collection of primitive data structures for working with a 2-dimensional grid.</Description>

    <!-- More nuget package settings-->
    <PackageId>TheSadRogue.Primitives</PackageId>
    <PackageReleaseNotes>
      - Renamed UnboundedViewport to to DefaultValueViewport
      - Moved all viewports to `SadRogue.Primitives.Viewport` namespace
      - Added `IViewport` interface which is an abstraction over a grid view which exposes a portion of another viewport
      - Added `SadRogue.Primitives.UnboundedGridViews`
          - Implements interfaces like `IGridView`, but with no bounds (eg no width/height and not guaranteed to start at (0, 0)
      - Added new viewports (`UnboundedViewport` and a settable variant) which expose sub-areas of `IUnboundedViewport` objects as `IGridView`
      - Added `SadRogue.Primitives.CoordinateSpaceTranslation` namespace, which implements coordinate translation from global to local coordinates
          - In combination with unbounded grid views, this now allows for an arbitrary, infinite grid to be easily represented to an algorithm as a finite grid
    </PackageReleaseNotes>
    <RepositoryUrl>https://github.com/thesadrogue/TheSadRogue.Primitives</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageTags>2d;grid;primitives;point;rectangle;game;development;standard;sadrogue;thesadrogue</PackageTags>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <CheckEolTargetFramework Condition="$(TargetFramework.StartsWith('net5.0')) == true">false</CheckEolTargetFramework>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE</DefineConstants>
  </PropertyGroup>

  <!-- Dependencies -->
  <ItemGroup>
    <PackageReference Include="JetBrains.Annotations" Version="2022.3.1">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
  </ItemGroup>

  <!-- When packing, copy the nuget files to the nuget output directory -->
  <Target Name="CopyPackage" AfterTargets="Pack">
    <Copy SourceFiles="$(OutputPath)\$(PackageId).$(Version).nupkg" DestinationFolder="$(OutputPath)..\..\..\nuget" />
    <Copy SourceFiles="$(OutputPath)\$(PackageId).$(Version).snupkg" DestinationFolder="$(OutputPath)..\..\..\nuget" />
  </Target>
</Project>
